# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WWJb_Os-1OMnLWXz9qJaUVpWRJdErc2d
"""

!python3 --version

from numba import jit, prange
import numpy as np
import time

"""### The function to use (I modified a bit the homework one)"""

@jit(nopython=True, fastmath=True)
def f(x: float, y: float, z: float) -> float:
  return np.sin(np.sqrt(x * x + y * y)) + z

f(1, 2, 3)

from random import uniform
print(uniform(1.2, 1.25))

"""### The parell version"""

@jit(nopython=True, parallel=True)
def integrate(fun, N: int, a: float, b: float, c: float, d: float, e: float, f: float) -> float:
  total = 0.0
  for i in prange(N):
    rand_x = uniform(a, b)
    rand_y = uniform(c, d)
    rand_z = uniform(e, f)
    total += fun(rand_x, rand_y, rand_z)

  return (b - a) * (d - c) * (f - e) * (total / N)

"""### Normal python version (+ fast fun)"""

def integrate_slow(fun, N: int, a: float, b: float, c: float, d: float, e: float, f: float) -> float:
  total = 0.0
  for i in range(N):
    rand_x = uniform(a, b)
    rand_y = uniform(c, d)
    rand_z = uniform(e, f)
    total += fun(rand_x, rand_y, rand_z)

  return (b - a) * (d - c) * (f - e) * (total / N)

"""## The function to work

$$
\int_{0}^1 \int_{0}^2 \int_{-1}^1 sin(sqrt(x * x + y * y)) + z \; \; dx \; dy \; dz
$$
"""

# Example
integrate(f, 200000, 0, 1, 0, 2, -1, 1)

import time
start = time.time()
integrate(f, 2_000_000, 0, 1, 0, 2, -1, 1)
end = time.time()
print(f"Elapsed (parallel) = {end - start}")

import time
start = time.time()
integrate_slow(f, 2_000_000, 0, 1, 0, 2, -1, 1)
end = time.time()
print(f"Elapsed (normal) = {end - start}")